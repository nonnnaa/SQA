package com.example.hieuthuoc.controller;
import static com.example.hieuthuoc.entity.ThongBao.LoaiThongBao.KHUYEN_MAI;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import com.example.hieuthuoc.dto.PageDTO;
import com.example.hieuthuoc.dto.ResponseDTO;
import com.example.hieuthuoc.dto.SearchDTO;
import com.example.hieuthuoc.dto.ThongBaoDTO;
import com.example.hieuthuoc.entity.ThongBao;
import com.example.hieuthuoc.service.ThongBaoService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

// ThongBaoControllerTest.java

@SpringBootTest
@AutoConfigureMockMvc
@ExtendWith(MockitoExtension.class)
class ThongBaoControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @InjectMocks
    private ThongBaoController thongBaoController;

    @Mock
    private ThongBaoService thongBaoService;


    @Test
    void testGetByNguoiDungId_Success() {
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setId(1);
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(10);

        List<ThongBao> thongBaos = List.of(new ThongBao(), new ThongBao());

        PageDTO<List<ThongBao>> pageDTO = new PageDTO<>();
        pageDTO.setTotalPages(1);
        pageDTO.setTotalElements(2);
        pageDTO.setCurrentPage(0);
        pageDTO.setData(thongBaos);

        // Gi·∫£ s·ª≠ status l√† 200 cho th√†nh c√¥ng
        ResponseDTO<PageDTO<List<ThongBao>>> response = new ResponseDTO<>(200, "Success", pageDTO);

        Mockito.when(thongBaoService.getByNguoiDungId(searchDTO)).thenReturn(response);

        ResponseDTO<PageDTO<List<ThongBao>>> result = thongBaoController.getByNguoiDungId(searchDTO);

        // Ki·ªÉm tra status l√† 200
        Assertions.assertEquals(200, result.getStatus());
        // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ c√≥ ch√≠nh x√°c
        Assertions.assertEquals(2, result.getData().getData().size());
        Assertions.assertEquals(1, result.getData().getTotalPages());
        Assertions.assertEquals(2, result.getData().getTotalElements());
        Assertions.assertEquals(0, result.getData().getCurrentPage());
        Assertions.assertEquals("Success", result.getMsg());
    }




    @Test
    void testGetByNguoiDungId_emptyList() throws Exception {
        // Arrange
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);
        searchDTO.setKeyWord("Kh·∫©n c·∫•p"); // n·∫øu c√≥
        searchDTO.setId(999); // ID kh√¥ng t·ªìn t·∫°i

        String requestJson = new ObjectMapper().writeValueAsString(searchDTO);

        // Act & Assert
        mockMvc.perform(MockMvcRequestBuilders.post("/thongbao/list")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.content").isEmpty())
                .andExpect(jsonPath("$.status").value(200))
                .andExpect(jsonPath("$.msg").value("Th√†nh c√¥ng."));
    }


    @Test
    void testGetByNguoiDungId_invalid() throws Exception {
        // T·∫°o searchDTO thi·∫øu nguoiDungId ho·∫∑c c√≥ page < 0
        SearchDTO invalidSearchDTO = new SearchDTO();
        invalidSearchDTO.setId(-1);  // input kh√¥ng h·ª£p l·ªá
        invalidSearchDTO.setCurrentPage(5);
        invalidSearchDTO.setSize(10);
        invalidSearchDTO.setKeyWord("test");

        // Convert to JSON
        String requestJson = new ObjectMapper().writeValueAsString(invalidSearchDTO);
        // G·ª≠i POST request
        mockMvc.perform(MockMvcRequestBuilders.post("/thongbao/list")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestJson))
                .andExpect(status().isBadRequest()) // K·ª≥ v·ªçng l·ªói 400
                .andExpect(content().string(Matchers.containsString("Input kh√¥ng h·ª£p l·ªá"))); // Ki·ªÉm tra th√¥ng b√°o l·ªói
    }

    @Test
    void testSearchByLoaiThongBao_success() {
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setKeyWord("Kh·∫©n c·∫•p");
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);

        ThongBao tb = new ThongBao();
        tb.setId(1);
        tb.setTieuDe("C·∫£nh b√°o nhi·ªát ƒë·ªô cao");

        PageDTO<List<ThongBao>> pageDTO = new PageDTO<>();
        pageDTO.setTotalPages(1);
        pageDTO.setTotalElements(1L);
        pageDTO.setData(List.of(tb));


        ResponseDTO<PageDTO<List<ThongBao>>> expected = new ResponseDTO<>(200, "Th√†nh c√¥ng", pageDTO);

        when(thongBaoService.getByLoaiThongBao(searchDTO)).thenReturn(expected);

        ResponseDTO<PageDTO<List<ThongBao>>> actual = thongBaoController.searchByLoaiThongBao(searchDTO);

        System.out.println("‚úÖ Expected Output: " + expected);
        System.out.println("üéØ Actual Output: " + actual);

        assertEquals(200, actual.getStatus());
        assertEquals("Th√†nh c√¥ng", actual.getMsg());
        assertEquals(1, actual.getData().getData().size());
    }

    @Test
    void testSearchByLoaiThongBao_notFound() {
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setKeyWord("Kh√¥ng t·ªìn t·∫°i");
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);

        PageDTO<List<ThongBao>> emptyPage = new PageDTO<>();
        emptyPage.setTotalPages(0);
        emptyPage.setTotalElements(0L);
        emptyPage.setData(List.of());

        ResponseDTO<PageDTO<List<ThongBao>>> expected = new ResponseDTO<>(200, "Kh√¥ng c√≥ k·∫øt qu·∫£", emptyPage);

        when(thongBaoService.getByLoaiThongBao(searchDTO)).thenReturn(expected);

        ResponseDTO<PageDTO<List<ThongBao>>> actual = thongBaoController.searchByLoaiThongBao(searchDTO);

        System.out.println("‚úÖ Expected Output: " + expected);
        System.out.println("üéØ Actual Output: " + actual);

        assertEquals(404, actual.getStatus());
        assertEquals("Kh√¥ng c√≥ k·∫øt qu·∫£", actual.getMsg());
        assertTrue(actual.getData().getData().isEmpty());
    }

    @Test
    void testSearchByLoaiThongBao_nullKeyword() {
        // Arrange
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setKeyWord(null); // Kh√¥ng c√≥ keyword
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);

        List<ThongBao> thongBaoList = Arrays.asList(
                new ThongBao(), new ThongBao()
        );

        PageDTO<List<ThongBao>> pageDTO = new PageDTO<>();
        pageDTO.setTotalPages(1);
        pageDTO.setTotalElements(2);
        pageDTO.setCurrentPage(0);
        pageDTO.setData(thongBaoList);

        ResponseDTO<PageDTO<List<ThongBao>>> expected = new ResponseDTO<>(200, "Th√†nh c√¥ng", pageDTO);

        when(thongBaoService.getByLoaiThongBao(searchDTO)).thenReturn(expected);

        // Act
        ResponseDTO<PageDTO<List<ThongBao>>> actual = thongBaoController.searchByLoaiThongBao(searchDTO);

        // Assert
        assertEquals(200, actual.getStatus());
        assertEquals("Th√†nh c√¥ng", actual.getMsg());
        assertNotNull(actual.getData());
        assertEquals(2, actual.getData().getData().size());
    }





    @Test
    void testSearchByLoaiThongBao_emptyKeyword() {
        // Arrange
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setKeyWord(""); // Chu·ªói r·ªóng
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);

        // Expected: Tr·∫£ v·ªÅ ResponseDTO v·ªõi m√£ l·ªói 400 v√† th√¥ng b√°o "T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá"
        ResponseDTO<PageDTO<List<ThongBao>>> expected = new ResponseDTO<>(400, "T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá", null);

        // Mock ph∆∞∆°ng th·ª©c searchByLoaiThongBao trong controller tr·∫£ v·ªÅ expected
        when(thongBaoController.searchByLoaiThongBao(searchDTO)).thenReturn(expected);

        // Act: Call controller method
        ResponseDTO<PageDTO<List<ThongBao>>> actual = thongBaoController.searchByLoaiThongBao(searchDTO);

        // Assert
        assertNotNull(actual); // ƒê·∫£m b·∫£o actual kh√¥ng null
        assertEquals(400, actual.getStatus());
        assertEquals("T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá", actual.getMsg());
        assertNull(actual.getData());
    }




    @Test
    void testGetById_success() {
        // T·∫°o gi·∫£ th√¥ng b√°o
        ThongBao thongBao = new ThongBao();
        thongBao.setId(1);
        thongBao.setTieuDe("Th√¥ng b√°o kh·∫©n");

        // T·∫°o response gi·∫£ t·ª´ service
        ResponseDTO<ThongBao> expected = new ResponseDTO<>(200, "L·∫•y th√†nh c√¥ng", thongBao);

        // Khi g·ªçi service.getById(1) s·∫Ω tr·∫£ v·ªÅ expected
        when(thongBaoService.getById(1)).thenReturn(expected);

        // G·ªçi controller
        ResponseDTO<ThongBao> actual = thongBaoController.getById(1);

        // In k·∫øt qu·∫£
        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        // So s√°nh k·∫øt qu·∫£
        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals(expected.getMsg(), actual.getMsg());
        assertEquals(expected.getData(), actual.getData());
    }

    @Test
    void testGetById_notFound() {
        // Gi·∫£ l·∫≠p response kh√¥ng t√¨m th·∫•y
        ResponseDTO<ThongBao> expected = new ResponseDTO<>(404, "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o", null);

        when(thongBaoService.getById(999)).thenReturn(expected);

        ResponseDTO<ThongBao> actual = thongBaoController.getById(999);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals(expected.getMsg(), actual.getMsg());
        assertNull(actual.getData());
    }

    @Test
    void create_success() {
        // Arrange
        ThongBaoDTO thongBaoDTO = new ThongBaoDTO();
        thongBaoDTO.setTieuDe("Th√¥ng b√°o m·ªõi");
        thongBaoDTO.setNoiDung("N·ªôi dung th√¥ng b√°o");
        thongBaoDTO.setLoaiThongBao("HE_THONG");
        thongBaoDTO.setNguoiDungId(List.of(1, 2));

        ThongBao thongBao = new ThongBao();
        thongBao.setId(1);
        thongBao.setTieuDe(thongBaoDTO.getTieuDe());
        thongBao.setNoiDung(thongBaoDTO.getNoiDung());

        ResponseDTO<ThongBao> expected = new ResponseDTO<>();
        expected.setStatus(200);
        expected.setMsg("Success");
        expected.setData(thongBao);

        when(thongBaoService.create(thongBaoDTO)).thenReturn(expected);

        // Act
        ResponseDTO<ThongBao> actual = thongBaoController.create(thongBaoDTO);

        // Console Output
        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        // Assert
        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals(expected.getMsg(), actual.getMsg());
        assertNotNull(actual.getData());
        assertEquals("Th√¥ng b√°o m·ªõi", actual.getData().getTieuDe());
    }

    @Test
    void create_missingTitle() {
        // Arrange
        ThongBaoDTO thongBaoDTO = new ThongBaoDTO();
        thongBaoDTO.setTieuDe(null);
        thongBaoDTO.setNoiDung("N·ªôi dung test");
        thongBaoDTO.setLoaiThongBao("KHUYEN_MAI");

        ResponseDTO<ThongBao> expected = new ResponseDTO<>();
        expected.setStatus(400);
        expected.setMsg("Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        expected.setData(null);

        when(thongBaoService.create(thongBaoDTO)).thenReturn(expected);

        // Act
        ResponseDTO<ThongBao> actual = thongBaoController.create(thongBaoDTO);

        // Console Output
        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        // Assert
        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals(expected.getMsg(), actual.getMsg());
        assertNull(actual.getData());
    }

    @Test
    void update_success() {
        ThongBaoDTO dto = new ThongBaoDTO();
        dto.setId(1);
        dto.setTieuDe("C·∫≠p nh·∫≠t");
        dto.setNoiDung("N·ªôi dung m·ªõi");
        dto.setLoaiThongBao("SU_KIEN");

        ThongBao thongBao = new ThongBao();
        thongBao.setId(1);
        thongBao.setTieuDe("C·∫≠p nh·∫≠t");
        thongBao.setNoiDung("N·ªôi dung m·ªõi");

        ResponseDTO<ThongBao> expected = new ResponseDTO<>(200, "C·∫≠p nh·∫≠t th√†nh c√¥ng", thongBao);

        when(thongBaoService.update(dto)).thenReturn(expected);

        ResponseDTO<ThongBao> actual = thongBaoController.update(dto);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals(expected.getMsg(), actual.getMsg());
        assertNotNull(actual.getData());
    }

    //
    @Test
    void update_idNotFound() {
        ThongBaoDTO dto = new ThongBaoDTO();
        dto.setId(999);
        dto.setTieuDe("Kh√¥ng t·ªìn t·∫°i");
        dto.setNoiDung("Kh√¥ng t√¨m th·∫•y");

        ResponseDTO<ThongBao> expected = new ResponseDTO<>(404, "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o", null);

        when(thongBaoService.update(dto)).thenReturn(expected);

        ResponseDTO<ThongBao> actual = thongBaoController.update(dto);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(404, actual.getStatus());
        assertEquals("Kh√¥ng t√¨m th·∫•y th√¥ng b√°o", actual.getMsg());
        assertNull(actual.getData());
    }

    //
    @Test
    void update_missingTitle() {
        ThongBaoDTO dto = new ThongBaoDTO();
        dto.setId(1);
        dto.setTieuDe(null); // thi·∫øu ti√™u ƒë·ªÅ
        dto.setNoiDung("N·ªôi dung v·∫´n c√≥");

        ResponseDTO<ThongBao> expected = new ResponseDTO<>(400, "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng", null);

        when(thongBaoService.update(dto)).thenReturn(expected);

        ResponseDTO<ThongBao> actual = thongBaoController.update(dto);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(400, actual.getStatus());
        assertEquals("Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng", actual.getMsg());
        assertNull(actual.getData());
    }

    @Test
    void delete_success() {
        Integer id = 1;
        ResponseDTO<Void> expected = new ResponseDTO<>(200, "X√≥a th√†nh c√¥ng", null);

        when(thongBaoService.delete(id)).thenReturn(expected);

        ResponseDTO<Void> actual = thongBaoController.delete(id);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(200, actual.getStatus());
        assertEquals("X√≥a th√†nh c√¥ng", actual.getMsg());
        assertNull(actual.getData());
    }

    @Test
    void delete_notFound() {
        Integer id = 999;
        ResponseDTO<Void> expected = new ResponseDTO<>(404, "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o", null);

        when(thongBaoService.delete(id)).thenReturn(expected);

        ResponseDTO<Void> actual = thongBaoController.delete(id);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(404, actual.getStatus());
        assertEquals("Kh√¥ng t√¨m th·∫•y th√¥ng b√°o", actual.getMsg());
        assertNull(actual.getData());
    }

}


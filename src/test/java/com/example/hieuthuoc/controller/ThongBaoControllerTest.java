package com.example.hieuthuoc.controller;
import static com.example.hieuthuoc.entity.ThongBao.LoaiThongBao.KHUYEN_MAI;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.example.hieuthuoc.dto.PageDTO;
import com.example.hieuthuoc.dto.ResponseDTO;
import com.example.hieuthuoc.dto.SearchDTO;
import com.example.hieuthuoc.dto.ThongBaoDTO;
import com.example.hieuthuoc.entity.ThongBao;
import com.example.hieuthuoc.service.ThongBaoService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.List;

// ThongBaoControllerTest.java

@ExtendWith(MockitoExtension.class)
class ThongBaoControllerTest {

    @InjectMocks
    private ThongBaoController thongBaoController;

    @Mock
    private ThongBaoService thongBaoService;

    @Test
    void testGetByNguoiDungId_success() {
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setId(1);  // id ng∆∞·ªùi d√πng
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);

        ThongBao thongBao = new ThongBao();
        thongBao.setId(1);
        thongBao.setTieuDe("Th√¥ng b√°o m·ªõi");

        PageDTO<List<ThongBao>> pageDTO = new PageDTO<>();
        pageDTO.setTotalPages(1);
        pageDTO.setTotalElements(1L);
        pageDTO.setData(List.of(thongBao));

        ResponseDTO<PageDTO<List<ThongBao>>> expected = new ResponseDTO<>(200, "Th√†nh c√¥ng", pageDTO);

        when(thongBaoService.getByNguoiDungId(searchDTO)).thenReturn(expected);

        ResponseDTO<PageDTO<List<ThongBao>>> actual = thongBaoController.getByNguoiDungId(searchDTO);

        System.out.println("‚úÖ Expected Output: " + expected);
        System.out.println("üéØ Actual Output: " + actual);

        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals(expected.getMsg(), actual.getMsg());
        assertEquals(expected.getData().getData().size(), actual.getData().getData().size());
    }



    @Test
    void testGetByNguoiDungId_emptyList() {
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setId(99);  // user kh√¥ng c√≥ th√¥ng b√°o
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);

        PageDTO<List<ThongBao>> emptyPage = new PageDTO<>();
        emptyPage.setTotalPages(0);
        emptyPage.setTotalElements(0L);
        emptyPage.setData(List.of());

        ResponseDTO<PageDTO<List<ThongBao>>> expected = new ResponseDTO<>(200, "Kh√¥ng c√≥ th√¥ng b√°o", emptyPage);

        when(thongBaoService.getByNguoiDungId(searchDTO)).thenReturn(expected);

        ResponseDTO<PageDTO<List<ThongBao>>> actual = thongBaoController.getByNguoiDungId(searchDTO);

        System.out.println("‚úÖ Expected Output: " + expected);
        System.out.println("üéØ Actual Output: " + actual);

        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals("Kh√¥ng c√≥ th√¥ng b√°o", actual.getMsg());
        assertTrue(actual.getData().getData().isEmpty());
    }

    @Test
    void testGetByNguoiDungId_invalidId() {
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setId(-1); // id kh√¥ng h·ª£p l·ªá
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);

        ResponseDTO<PageDTO<List<ThongBao>>> expected = new ResponseDTO<>(400, "L·ªói ƒë·∫ßu v√†o", null);

        when(thongBaoService.getByNguoiDungId(searchDTO)).thenReturn(expected);

        ResponseDTO<PageDTO<List<ThongBao>>> actual = thongBaoController.getByNguoiDungId(searchDTO);

        System.out.println("‚úÖ Expected Output: " + expected);
        System.out.println("üéØ Actual Output: " + actual);

        assertEquals(400, actual.getStatus());
        assertEquals("L·ªói ƒë·∫ßu v√†o", actual.getMsg());
        assertNull(actual.getData());
    }

    @Test
    void testSearchByLoaiThongBao_success() {
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setKeyWord("Kh·∫©n c·∫•p");
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);

        ThongBao tb = new ThongBao();
        tb.setId(1);
        tb.setTieuDe("C·∫£nh b√°o nhi·ªát ƒë·ªô cao");

        PageDTO<List<ThongBao>> pageDTO = new PageDTO<>();
        pageDTO.setTotalPages(1);
        pageDTO.setTotalElements(1L);
        pageDTO.setData(List.of(tb));


        ResponseDTO<PageDTO<List<ThongBao>>> expected = new ResponseDTO<>(200, "Th√†nh c√¥ng", pageDTO);

        when(thongBaoService.getByLoaiThongBao(searchDTO)).thenReturn(expected);

        ResponseDTO<PageDTO<List<ThongBao>>> actual = thongBaoController.searchByLoaiThongBao(searchDTO);

        System.out.println("‚úÖ Expected Output: " + expected);
        System.out.println("üéØ Actual Output: " + actual);

        assertEquals(200, actual.getStatus());
        assertEquals("Th√†nh c√¥ng", actual.getMsg());
        assertEquals(1, actual.getData().getData().size());
    }

    @Test
    void testSearchByLoaiThongBao_notFound() {
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setKeyWord("Kh√¥ng t·ªìn t·∫°i");
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);

        PageDTO<List<ThongBao>> emptyPage = new PageDTO<>();
        emptyPage.setTotalPages(0);
        emptyPage.setTotalElements(0L);
        emptyPage.setData(List.of());

        ResponseDTO<PageDTO<List<ThongBao>>> expected = new ResponseDTO<>(200, "Kh√¥ng c√≥ k·∫øt qu·∫£", emptyPage);

        when(thongBaoService.getByLoaiThongBao(searchDTO)).thenReturn(expected);

        ResponseDTO<PageDTO<List<ThongBao>>> actual = thongBaoController.searchByLoaiThongBao(searchDTO);

        System.out.println("‚úÖ Expected Output: " + expected);
        System.out.println("üéØ Actual Output: " + actual);

        assertEquals(200, actual.getStatus());
        assertEquals("Kh√¥ng c√≥ k·∫øt qu·∫£", actual.getMsg());
        assertTrue(actual.getData().getData().isEmpty());
    }

    @Test
    void testSearchByLoaiThongBao_nullKeyword() {
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setKeyWord(null);
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);

        ResponseDTO<PageDTO<List<ThongBao>>> expected = new ResponseDTO<>(400, "T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá", null);

        when(thongBaoService.getByLoaiThongBao(searchDTO)).thenReturn(expected);

        ResponseDTO<PageDTO<List<ThongBao>>> actual = thongBaoController.searchByLoaiThongBao(searchDTO);

        System.out.println("‚úÖ Expected Output: " + expected);
        System.out.println("üéØ Actual Output: " + actual);

        assertEquals(400, actual.getStatus());
        assertEquals("T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá", actual.getMsg());
        assertNull(actual.getData());
    }

    @Test
    void testSearchByLoaiThongBao_emptyKeyword() {
        SearchDTO searchDTO = new SearchDTO();
        searchDTO.setKeyWord("");
        searchDTO.setCurrentPage(0);
        searchDTO.setSize(5);

        ThongBao thongBao1 = new ThongBao(); // c√≥ th·ªÉ set gi√° tr·ªã n·∫øu c·∫ßn
        ThongBao thongBao2 = new ThongBao();

        List<ThongBao> thongBaos = List.of(thongBao1, thongBao2);

        PageDTO<List<ThongBao>> allPage = new PageDTO<>();
        allPage.setTotalPages(1);
        allPage.setTotalElements(2L);
        allPage.setData(thongBaos);

        ResponseDTO<PageDTO<List<ThongBao>>> expected = new ResponseDTO<>(200, "Danh s√°ch ƒë·∫ßy ƒë·ªß", allPage);

        when(thongBaoService.getByLoaiThongBao(searchDTO)).thenReturn(expected);

        ResponseDTO<PageDTO<List<ThongBao>>> actual = thongBaoController.searchByLoaiThongBao(searchDTO);

        System.out.println("‚úÖ Expected Output: " + expected);
        System.out.println("üéØ Actual Output: " + actual);

        assertEquals(200, actual.getStatus());
        assertEquals("Danh s√°ch ƒë·∫ßy ƒë·ªß", actual.getMsg());
        assertEquals(2, actual.getData().getData().size());

    }

    @Test
    void testGetById_success() {
        // T·∫°o gi·∫£ th√¥ng b√°o
        ThongBao thongBao = new ThongBao();
        thongBao.setId(1);
        thongBao.setTieuDe("Th√¥ng b√°o kh·∫©n");

        // T·∫°o response gi·∫£ t·ª´ service
        ResponseDTO<ThongBao> expected = new ResponseDTO<>(200, "L·∫•y th√†nh c√¥ng", thongBao);

        // Khi g·ªçi service.getById(1) s·∫Ω tr·∫£ v·ªÅ expected
        when(thongBaoService.getById(1)).thenReturn(expected);

        // G·ªçi controller
        ResponseDTO<ThongBao> actual = thongBaoController.getById(1);

        // In k·∫øt qu·∫£
        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        // So s√°nh k·∫øt qu·∫£
        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals(expected.getMsg(), actual.getMsg());
        assertEquals(expected.getData(), actual.getData());
    }

    @Test
    void testGetById_notFound() {
        // Gi·∫£ l·∫≠p response kh√¥ng t√¨m th·∫•y
        ResponseDTO<ThongBao> expected = new ResponseDTO<>(404, "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o", null);

        when(thongBaoService.getById(999)).thenReturn(expected);

        ResponseDTO<ThongBao> actual = thongBaoController.getById(999);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals(expected.getMsg(), actual.getMsg());
        assertNull(actual.getData());
    }

    @Test
    void create_success() {
        // Arrange
        ThongBaoDTO thongBaoDTO = new ThongBaoDTO();
        thongBaoDTO.setTieuDe("Th√¥ng b√°o m·ªõi");
        thongBaoDTO.setNoiDung("N·ªôi dung th√¥ng b√°o");
        thongBaoDTO.setLoaiThongBao("HE_THONG");
        thongBaoDTO.setNguoiDungId(List.of(1, 2));

        ThongBao thongBao = new ThongBao();
        thongBao.setId(1);
        thongBao.setTieuDe(thongBaoDTO.getTieuDe());
        thongBao.setNoiDung(thongBaoDTO.getNoiDung());

        ResponseDTO<ThongBao> expected = new ResponseDTO<>();
        expected.setStatus(200);
        expected.setMsg("Success");
        expected.setData(thongBao);

        when(thongBaoService.create(thongBaoDTO)).thenReturn(expected);

        // Act
        ResponseDTO<ThongBao> actual = thongBaoController.create(thongBaoDTO);

        // Console Output
        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        // Assert
        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals(expected.getMsg(), actual.getMsg());
        assertNotNull(actual.getData());
        assertEquals("Th√¥ng b√°o m·ªõi", actual.getData().getTieuDe());
    }

    @Test
    void create_missingTitle() {
        // Arrange
        ThongBaoDTO thongBaoDTO = new ThongBaoDTO();
        thongBaoDTO.setTieuDe(null); // thi·∫øu ti√™u ƒë·ªÅ
        thongBaoDTO.setNoiDung("N·ªôi dung test");
        thongBaoDTO.setLoaiThongBao("KHUYEN_MAI");

        ResponseDTO<ThongBao> expected = new ResponseDTO<>();
        expected.setStatus(400);
        expected.setMsg("Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        expected.setData(null);

        when(thongBaoService.create(thongBaoDTO)).thenReturn(expected);

        // Act
        ResponseDTO<ThongBao> actual = thongBaoController.create(thongBaoDTO);

        // Console Output
        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        // Assert
        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals(expected.getMsg(), actual.getMsg());
        assertNull(actual.getData());
    }

    @Test
    void update_success() {
        ThongBaoDTO dto = new ThongBaoDTO();
        dto.setId(1);
        dto.setTieuDe("C·∫≠p nh·∫≠t");
        dto.setNoiDung("N·ªôi dung m·ªõi");
        dto.setLoaiThongBao("SU_KIEN");

        ThongBao thongBao = new ThongBao();
        thongBao.setId(1);
        thongBao.setTieuDe("C·∫≠p nh·∫≠t");
        thongBao.setNoiDung("N·ªôi dung m·ªõi");

        ResponseDTO<ThongBao> expected = new ResponseDTO<>(200, "C·∫≠p nh·∫≠t th√†nh c√¥ng", thongBao);

        when(thongBaoService.update(dto)).thenReturn(expected);

        ResponseDTO<ThongBao> actual = thongBaoController.update(dto);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(expected.getStatus(), actual.getStatus());
        assertEquals(expected.getMsg(), actual.getMsg());
        assertNotNull(actual.getData());
    }

    //
    @Test
    void update_idNotFound() {
        ThongBaoDTO dto = new ThongBaoDTO();
        dto.setId(999);
        dto.setTieuDe("Kh√¥ng t·ªìn t·∫°i");
        dto.setNoiDung("Kh√¥ng t√¨m th·∫•y");

        ResponseDTO<ThongBao> expected = new ResponseDTO<>(404, "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o", null);

        when(thongBaoService.update(dto)).thenReturn(expected);

        ResponseDTO<ThongBao> actual = thongBaoController.update(dto);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(404, actual.getStatus());
        assertEquals("Kh√¥ng t√¨m th·∫•y th√¥ng b√°o", actual.getMsg());
        assertNull(actual.getData());
    }

    //
    @Test
    void update_missingTitle() {
        ThongBaoDTO dto = new ThongBaoDTO();
        dto.setId(1);
        dto.setTieuDe(null); // thi·∫øu ti√™u ƒë·ªÅ
        dto.setNoiDung("N·ªôi dung v·∫´n c√≥");

        ResponseDTO<ThongBao> expected = new ResponseDTO<>(400, "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng", null);

        when(thongBaoService.update(dto)).thenReturn(expected);

        ResponseDTO<ThongBao> actual = thongBaoController.update(dto);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(400, actual.getStatus());
        assertEquals("Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng", actual.getMsg());
        assertNull(actual.getData());
    }

    @Test
    void delete_success() {
        Integer id = 1;
        ResponseDTO<Void> expected = new ResponseDTO<>(200, "X√≥a th√†nh c√¥ng", null);

        when(thongBaoService.delete(id)).thenReturn(expected);

        ResponseDTO<Void> actual = thongBaoController.delete(id);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(200, actual.getStatus());
        assertEquals("X√≥a th√†nh c√¥ng", actual.getMsg());
        assertNull(actual.getData());
    }

    @Test
    void delete_notFound() {
        Integer id = 999;
        ResponseDTO<Void> expected = new ResponseDTO<>(404, "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o", null);

        when(thongBaoService.delete(id)).thenReturn(expected);

        ResponseDTO<Void> actual = thongBaoController.delete(id);

        System.out.println("Expected Output: " + expected);
        System.out.println("Actual Output: " + actual);

        assertEquals(404, actual.getStatus());
        assertEquals("Kh√¥ng t√¨m th·∫•y th√¥ng b√°o", actual.getMsg());
        assertNull(actual.getData());
    }

}

